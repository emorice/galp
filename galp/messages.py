"""
Models for Galp messages

Not in actual use yet
"""

from typing import Literal, Annotated, TypeVar
from enum import Enum
from dataclasses import field, dataclass
from pydantic import Field, PlainSerializer

from . import task_types as gtt
from .task_types import TaskName, TaskDef, CoreTaskDef, TaskRef

class Role(str, Enum):
    """
    Enum identifying the role of a peer in the system
    """
    POOL = 'pool'
    WORKER = 'worker'

M = TypeVar('M', bound='BaseMessage')

@dataclass
class BaseMessage:
    """
    Base class for messages
    """

@dataclass
class Doing(BaseMessage):
    """
    A message signaling that a task has been allocated or started

    Attributes:
        name: the task name
    """
    name: TaskName

    verb: Literal['doing'] = field(default='doing', repr=False)

@dataclass
class Done(BaseMessage):
    """
    A message signaling that a task has been succesful run

    Attributes:
        task_def: the task
        children: the child tasks, typically not yet run, generated by the task
            execution
    """
    task_def: TaskDef
    result: gtt.FlatResultRef

    verb: Literal['done'] = field(default='done', repr=False)

@dataclass
class Exit(BaseMessage):
    """
    A message asking a peer to leave the system
    """
    verb: Literal['exit'] = field(default='exit', repr=False)

@dataclass
class Exited(BaseMessage):
    """
    Signals that a peer (unexpectedly) exited. This is typically sent by an
    other peer that detected the kill event

    Attributes:
        peer: the local id (pid) of the exited peer
    """
    peer: str

    verb: Literal['exited'] = field(default='exited', repr=False)

@dataclass
class Failed(BaseMessage):
    """
    Signals that the execution of task has failed

    Attributes:
        task_def: the definition of the failed task
    """
    task_def: CoreTaskDef

    verb: Literal['failed'] = field(default='failed', repr=False)

@dataclass
class Found(BaseMessage):
    """
    A message notifying that a task was registered, but not yet executed

    Attributes:
        task_def: the task definition
    """
    task_def: TaskDef

    verb: Literal['found'] = field(default='found', repr=False)

@dataclass
class Get(BaseMessage):
    """
    A message asking for an already computed resource

    Attributes:
        name: the task name
    """
    name: TaskName

    verb: Literal['get'] = field(default='get', repr=False)

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.name.hex()}'.encode('ascii')

@dataclass
class Illegal(BaseMessage):
    """
    A message notifying that a previously sent message was malformed

    Attributes:
        reason: an error message
    """
    reason:str

    verb: Literal['illegal'] = field(default='illegal', repr=False)

@dataclass
class NotFound(BaseMessage):
    """
    A message indicating that no trace of a task was found

    Attributes:
        name: the task name
    """
    name: TaskName

    verb: Literal['not_found'] = field(default='not_found', repr=False)

@dataclass
class Put(BaseMessage):
    """
    A message sending a serialized task result

    Atrributes:
        name: the task name whose result is sent
        data: the serialized result data
        children: the subordinate task references that are linked from within the
            serialized data
    """
    name: TaskName
    data: bytes
    children: list[TaskRef]

    verb: Literal['put'] = field(default='put', repr=False)

@dataclass
class Ready(BaseMessage):
    """
    A message advertising a peer joining the system

    Attributes:
        local_id: a string identifying the worker in a local system, typically the pid
        mission: a bytestring identifying why the peer is joining
    """
    role: Annotated[Role, PlainSerializer(lambda x: x.value)]
    local_id: str
    mission: bytes

    verb: Literal['ready'] = field(default='ready', repr=False)

@dataclass
class Stat(BaseMessage):
    """
    A message asking if a task is defined or executed

    Attributes:
        name: the task name
    """
    name: TaskName

    verb: Literal['stat'] = field(default='stat', repr=False)

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.name.hex()}'.encode('ascii')

@dataclass
class Submit(BaseMessage):
    """
    A message asking for a task to be executed

    Attributes:
        task_def: the task to execute
        resources: to be allocated to the task
    """
    task_def: CoreTaskDef
    resources: gtt.Resources

    verb: Literal['submit'] = field(default='submit', repr=False)

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.task_def.name.hex()}'.encode('ascii')

Message = Annotated[
        Doing | Done | Exit | Exited | Failed | Found | Get | Illegal | NotFound
        | Put | Ready | Stat | Submit,
        Field(discriminator='verb')
        ]
