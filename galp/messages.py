"""
Models for Galp messages

Not in actual use yet
"""

from typing import Literal, Annotated, TypeVar, TypeAlias, Union
from enum import Enum
from pydantic import BaseModel, Field, PlainSerializer

from . import task_types as tt
from .task_types import TaskName, TaskDef, CoreTaskDef

class Role(str, Enum):
    """
    Enum identifying the role of a peer in the system
    """
    POOL = 'pool'
    WORKER = 'worker'

M = TypeVar('M', bound='Message')

class Message(BaseModel):
    """
    Base class for messages
    """
    verb: str

class Doing(Message):
    """
    A message signaling that a task has been allocated or started

    Attributes:
        name: the task name
    """
    verb: Literal['doing'] = Field('doing', repr=False)

    name: TaskName

class Done(Message):
    """
    A message signaling that a task has been succesful run

    Attributes:
        task_def: the task
        children: the child tasks, typically not yet run, generated by the task
            execution
    """
    verb: Literal['done'] = Field('done', repr=False)

    task_def: TaskDef
    children: list[tt.TaskReference]

class Exit(Message):
    """
    A message asking a peer to leave the system
    """
    verb: Literal['exit'] = Field('exit', repr=False)

class Exited(Message):
    """
    Signals that a peer (unexpectedly) exited. This is typically sent by an
    other peer that detected the kill event

    Attributes:
        peer: the local id (pid) of the exited peer
    """
    verb: Literal['exited'] = Field('exited', repr=False)

    peer: str

class Failed(Message):
    """
    Signals that the execution of task has failed

    Attributes:
        task_def: the definition of the failed task
    """
    verb: Literal['failed'] = Field('failed', repr=False)

    task_def: CoreTaskDef

class Found(Message):
    """
    A message notifying that a task was registered, but not yet executed

    Attributes:
        task_def: the task definition
    """
    verb: Literal['found'] = Field('found', repr=False)

    task_def: TaskDef

class Get(Message):
    """
    A message asking for an already computed resource

    Attributes:
        name: the task name
    """
    verb: Literal['get'] = Field('get', repr=False)

    name: TaskName

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.name.hex()}'.encode('ascii')

class Illegal(Message):
    """
    A message notifying that a previously sent message was malformed

    Attributes:
        reason: an error message
    """
    verb: Literal['illegal'] = Field('illegal', repr=False)

    reason:str

class NotFound(Message):
    """
    A message indicating that no trace of a task was found

    Attributes:
        name: the task name
    """
    verb: Literal['not_found'] = Field('not_found', repr=False)

    name: TaskName

class Put(Message):
    """
    A message sending a serialized task result

    Atrributes:
        name: the task name whose result is sent
        data: the serialized result data
        children: the subordinate task names that are linked from within the
            serialized data
    """

    verb: Literal['put'] = Field('put', repr=False)

    name: TaskName
    data: bytes
    children: list[TaskName]

class Ready(Message):
    """
    A message advertising a peer joining the system

    Attributes:
        local_id: a string identifying the worker in a local system, typically the pid
        mission: a bytestring identifying why the peer is joining
    """
    verb: Literal['ready'] = Field('ready', repr=False)

    role: Annotated[Role, PlainSerializer(lambda x: x.value)]
    local_id: str
    mission: bytes

class Stat(Message):
    """
    A message asking if a task is defined or executed

    Attributes:
        name: the task name
    """
    verb: Literal['stat'] = Field('stat', repr=False)

    name: TaskName

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.name.hex()}'.encode('ascii')

class Submit(Message):
    """
    A message asking for a task to be executed

    Attributes:
        task_def: the task to execute
    """
    verb: Literal['submit'] = Field('submit', repr=False)

    task_def: CoreTaskDef

    @property
    def task_key(self) -> bytes:
        """
        Unique request identifier
        """
        return f'{self.verb}:{self.task_def.name.hex()}'.encode('ascii')

AnyMessage = Annotated[
        Doing | Done | Exit | Exited | Failed | Found | Get | Illegal | NotFound
        | Put | Ready | Stat | Submit,
        Field(discriminator='verb')
        ]
